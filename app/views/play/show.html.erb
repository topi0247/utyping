<h1 class="text-3xl my-8 text-center">
  <%= @lyric.title %>
</h1>
<div class="text-end">
  <p>
    <%= link_to '一覧へ戻る' , play_index_path, 'data-turbolinks': false %>
  </p>
</div>
<section id="loading" class="w-[640px] h-[380px] m-auto flex justify-center items-center relative">
  <div
    class="p-3 animate-spin bg-gradient-to-bl from-green-300 via-orange-300 to-yellow-300 md:w-48 md:h-48 h-32 w-32 aspect-square rounded-full">
    <div class="rounded-full h-full w-full bg-slate-100  background-blur-md"></div>
  </div>
  <div class="absolute">Now Loading...</div>
</section>
<div id="youtube" class="relative hidden">
  <div class="after:absolute after:top-0 after:w-[640px] after:h-[360px] after:content[''] after:bg-transparent">
    <div id="player"></div>
  </div>
</div>
<div class="text-end">
  <button type="button" class="bg-red-200 rounded px-2 py-1 my-7" onclick="tryPlay()">再生されなかったら押してね！</button>
</div>
<div id="show" class="text-center mb-3 text-lg">
  <h3 class="text-lg">歌詞</h3>
  <div class="grid grid-cols-2 w-full">
    <div id="lyrics" class="text-slate border-r border-slate-200">
      <p class="bg-green-300">Now</p>
      <p id="current-kanji" class=" text-sm"></p>
      <p id="current-hira"></p>
    </div>
    <div id="next-lyrics" class="text-slate">
      <p class="bg-yellow-200">Next</p>
      <p id="next-kanji" class="text-sm"></p>
      <p id="next-hira"></p>
    </div>
  </div>
</div>
<div class="block w-full">
  <input type="text" class="bg-slate-200 w-full p-2 rounded" id="inputText" placeholder="ここに歌詞を入力してね！" />
</div>
<div id="sentence" class="bg-slate-400 p-2 rounded mt-2 text-white">
  <h3 class="text-lg text-slate-100 text-center">入力した文字</h3>
</div>
<section id="result"
  class="absolute top-0 left-0 w-full min-h-screen bg-black bg-opacity-50 justify-center items-center m-auto hidden">
  <div class="bg-white w-96 p-2 rounded">
    <h5 class="text-center">あなたのスコアは</h5>
    <p class="text-center text-3xl my-4">100 / 100%</p>
    <%= form_with url: play_path(@lyric.id), method: :post, class: 'flex justify-center items-center my-7' do |f| %>
      <%= f.hidden_field :score, value: 100 %>
      <%= f.submit '結果を保存' , class: 'bg-green-300 text-white p-2 rounded text-black' %>
    <% end %>
    <div class="flex gap-3 justify-center items-center">
      <%= link_to 'もう一度' , play_path(@lyric.id), 'data-turbolinks': false %>
      <%= link_to '一覧へ戻る' , play_index_path, 'data-turbolinks': false %>
      <a href="https://twitter.com/intent/tweet?text=<%= ERB::Util.url_encode('「COSMOS」記録は100%【うたいぴんぐ♫】') %>&url=<%= ERB::Util.url_encode(request.original_url) %>&hashtags=<%= ERB::Util.url_encode('うたいぴんぐ_topi') %>"
                    target="_blank">Tweet</a>
    </div>
  </div>
</section>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<script src="https://www.youtube.com/iframe_api"></script>
<script>
  const rap = <%= @lyric.data.to_json.html_safe %>;
  const videoId = "<%= @lyric.uid %>";
  let timeoutId = setTimeout(() => {
    onYouTubeIframeAPIReady();
    clearTimeout(timeoutId);
  }, 1000);

  let intervalId;

  let player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
      playerVars: { 'autoplay': 1, 'controls': 0 },
      height: '360',
      width: '640',
      videoId: videoId,
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange,
      },
    });
  }

  function onPlayerReady(event) {
    event.target.playVideo();
    const loading = document.querySelector('#loading');
    loading.classList.add('hidden');
    const youtube = document.querySelector('#youtube');
    youtube.classList.remove('hidden');
  }

  function onPlayerStateChange(event) {
    if (event.data != YT.PlayerState.PLAYING) return;

    let index = 0;
    const currentKanji = document.querySelector('#current-kanji');
    currentKanji.textContent = rap[index].kanji;
    const currentHira = document.querySelector('#current-hira');
    currentHira.textContent = rap[index].hiragana;
    const nextKanji = document.querySelector('#next-kanji');
    nextKanji.textContent = rap[index + 1].kanji;
    const nextHira = document.querySelector('#next-hira');
    nextHira.textContent = rap[index + 1].hiragana;

    const inputText = document.querySelector('#inputText');
    const sentence = document.querySelector('#sentence');
    let volume = 100;

    const result = document.querySelector('#result');
    let inputLyrics = [];

    intervalId = setInterval(() => {
      console.log('interval');
      if (!player) return;
      const currentPlayTime = player.getCurrentTime();

      if (index === rap.length) {
        if (currentPlayTime <= rap[rap.length - 1].time + 5) {
          player.setVolume(volume);
          volume -= 20;
          return;
        }

        const score = inputLyrics.filter((lyric, i) => lyric === rap[i].lyric).length;

        result.classList.remove('hidden');
        result.classList.add('flex');
        player.stopVideo();
        clearInterval(intervalId);
        return;
      }

      console.log(Math.ceil(currentPlayTime) === rap[index].time, currentPlayTime, rap[index].time)

      if (Math.ceil(currentPlayTime) === rap[index].time) {
        const inputTextValue = inputText.value;
        const p = document.createElement('p');
        p.textContent = inputTextValue;
        sentence.appendChild(p);
        inputLyrics.push(inputTextValue);
        inputText.value = '';
        index++;
        if (index === rap.length) {
          inputText.value = '';
          currentKanji.textContent = '終わり';
          currentHira.textContent = '';
          return;
        }
        currentKanji.textContent = rap[index].kanji;
        currentHira.textContent = rap[index].hiragana;
        if (index === rap.length - 1) {
          nextKanji.textContent = '終わり';
          nextHira.textContent = '';
          return;
        }
        nextKanji.textContent = rap[index + 1].kanji;
        nextHira.textContent = rap[index + 1].hiragana;
      }

    }, 1000);
  }

  function tryPlay(){
    player.playVideo();
  }
</script>