<article class="max-w-[640px] w-full m-auto p-4">
  <h1 id="title" class="text-3xl text-center">
    <%= @lyric.title %>
  </h1>
  <div class="text-end">
    <p>
      <%= link_to '一覧へ戻る' , root_path, 'data-turbolinks': false %>
    </p>
  </div>
  <section id="loading" class="max-w-[640px] max-h-[380px] w-full h-full m-auto flex justify-center items-center relative">
    <div
      class="p-3 animate-spin bg-gradient-to-bl from-green-300 via-orange-300 to-yellow-300 md:w-48 md:h-48 h-32 w-32 aspect-square rounded-full">
      <div class="rounded-full h-full w-full bg-slate-100  background-blur-md"></div>
    </div>
    <div class="absolute">Now Loading...</div>
  </section>
  <div id="youtube" class="relative hidden">
    <div class="flex justify-center items-center after:absolute after:top-0 after:max-w-[640px] after:max-h-[360px] w-full h-full after:content[''] after:bg-transparent">
      <div id="player"></div>
    </div>
  </div>
  <div class="text-center my-4">
    <small class="block">※始めるボタンが反応しなかったらリロードしてください。</small>
    <button id="play" type="button" class="rounded px-2 py-1 bg-red-200 hidden">始める</button>
    <button type="button" class="bg-red-200 rounded px-2 py-1" onclick="window.location.reload()">リロード</button>
    <p>音量</p>
    <input id="volume" type="range" value="50" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer light:bg-gray-700">
  </div>
  <div id="show" class="text-center mb-3 text-lg">
    <div class="grid grid-rows-1 sm:grid-cols-2 w-full">
      <div id="lyrics" class="text-slate border-r border-slate-200 order-2 sm:order-1">
        <p class="bg-green-300">Now</p>
        <p id="current-kanji" class=" text-sm"></p>
        <p id="current-hira"></p>
      </div>
      <div id="next-lyrics" class="text-slate order-1 sm:order-2">
        <p class="bg-yellow-200">Next</p>
        <p id="next-kanji" class="text-sm"></p>
        <p id="next-hira"></p>
      </div>
    </div>
  </div>
  <div class="block w-full">
    <input type="text" class="bg-slate-200 w-full p-2 rounded focus:outline-none" id="inputText" placeholder="ここに歌詞を入力してね！" />
  </div>
  <div id="sentence" class="bg-slate-400 p-2 rounded text-white h-48 overflow-auto">
    <h3 class="text-lg text-slate-100 text-center">入力した歌詞</h3>
  </div>
  <section id="result"
    class="absolute top-0 left-0 w-full h-screen bg-black bg-opacity-50 justify-center items-center m-auto hidden">
    <div class="bg-white w-96 p-2 rounded">
      <h5 class="text-center">あなたのスコアは</h5>
      <p id="score" class="text-center text-3xl my-4 px-2 py-1"></p>
      <%= form_with model: @record, url: record_path, html: { class: 'flex justify-center items-center my-7' } do |f| %>
        <%= f.hidden_field :match_hiragana_count, id: 'match_count' %>
        <%= f.hidden_field :lyric_id, vlaue: @lyric.id %>
        <%= f.text_field :user_name, placeholder: '名前を入力してね', required: true %>
        <%= f.submit '結果を保存' , class: 'bg-green-300 text-white p-2 rounded text-black' %>
      <% end %>
      <div class="flex gap-3 justify-center items-center">
        <%= link_to 'もう一度' , play_path(@lyric.id)%>
        <%= link_to '一覧へ戻る' , root_path %>
        <a id="x-share" href="https://twitter.com/intent/tweet?&url=https://utyping-dbd8ac4df84a.herokuapp.com/&hashtags=うたいぴんぐ_topi"
                      target="_blank">Xに投稿</a>
      </div>
    </div>
  </section>
</article>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<script src="https://www.youtube.com/iframe_api"></script>
<script>
  const lyrics = <%= @lyric.data.to_json.html_safe %>;
  let index = 0;
  const currentKanji = document.querySelector('#current-kanji');
  currentKanji.textContent = lyrics[index].kanji;
  const currentHira = document.querySelector('#current-hira');
  currentHira.textContent = lyrics[index].hiragana;
  const nextKanji = document.querySelector('#next-kanji');
  nextKanji.textContent = lyrics[index + 1].kanji;
  const nextHira = document.querySelector('#next-hira');
  nextHira.textContent = lyrics[index + 1].hiragana;
  const inputText = document.querySelector('#inputText');
  const sentence = document.querySelector('#sentence');
  const result = document.querySelector('#result');
  const videoId = "<%= @lyric.uid %>";
  const volumeEl = document.querySelector('#volume');
  let volume = volumeEl.value;
  let volumeDownValue = volume / 5;
  let player;
  let intervalId;
  let inputLyrics = [];
  let width = document.documentElement.clientWidth;
  if(width > 640) width = 640;
  const height = Math.ceil((width * 9) / 16);

  onYouTubeIframeAPIReady();

  function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
      playerVars: { 'controls' : 0 },
      height: height,
      width: width,
      videoId: videoId,
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange,
      },
    });
  }

  function onPlayerReady(event) {
    const loading = document.querySelector('#loading');
    loading.classList.add('hidden');
    const youtube = document.querySelector('#youtube');
    youtube.classList.remove('hidden');

    const play = document.querySelector('#play');
    play.classList.remove('hidden');
    play.addEventListener('click', () => {
      player.playVideo();
    });

    volumeEl.addEventListener('input', (e) => {
      volume = e.target.value;
      volumeDownValue = volume / 5;
      player.setVolume(volume);
    });
  }

  function onPlayerStateChange(event) {
    if (event.data != YT.PlayerState.PLAYING) return;

    intervalId = setInterval(() => {
      if (!player) return;

      const currentPlayTime = player.getCurrentTime();

      if (index === lyrics.length) {
        if (currentPlayTime <= lyrics[lyrics.length - 1].time + 5 || volume > 0) {
          player.setVolume(volume);
          volume -= volumeDownValue;
          return;
        }

        finish();
        return;
      }

      if (Math.ceil(currentPlayTime) > lyrics[index].time) {
        const inputTextValue = inputText.value;
        const p = document.createElement('p');
        p.textContent = inputTextValue;
        sentence.appendChild(p);
        inputLyrics.push(inputTextValue);
        inputText.value = '';
        index++;
        if (index === lyrics.length) {
          inputText.value = '';
          currentKanji.textContent = '終わり';
          currentHira.textContent = '';
          return;
        }
        currentKanji.textContent = lyrics[index].kanji;
        currentHira.textContent = lyrics[index].hiragana;
        if (index === lyrics.length - 1) {
          nextKanji.textContent = '終わり';
          nextHira.textContent = '';
          return;
        }
        nextKanji.textContent = lyrics[index + 1].kanji;
        nextHira.textContent = lyrics[index + 1].hiragana;
      }

    }, 1000);
  }

  function finish(){
    player.stopVideo();
    result.classList.remove('hidden');
    result.classList.add('flex');
    clearInterval(intervalId);

    const hiragana_hash = <%= @hiragana.to_json.html_safe %>;

    const inputLyricsCharCount = inputLyrics.join('').split('').reduce((acc, char) => {
      acc[char] = (acc[char] || 0) + 1;
      return acc;
    }, {});
    let score = Object.keys(inputLyricsCharCount).reduce((acc, char) => {
      const count = inputLyricsCharCount[char];
      const hiraganaCount = hiragana_hash[char] || 0;
      return acc + Math.min(count, hiraganaCount);
    }, 0);
    const hiragana_count = <%= @lyric.hiragana_char_count %>
    const input_hiragana_count = inputLyrics.join('').split('').length;
    diff = input_hiragana_count - hiragana_count;
    if(diff > 0) score -= diff;

    const match_count = document.querySelector('#match_count');
    match_count.value = score;

    const x_shere = document.querySelector('#x-share');
    const scoreEl = document.querySelector('#score');
    const per = Math.floor(score / hiragana_count * 100);
    scoreEl.textContent = `${score} / ${hiragana_count} (${per}%)`;
    let shere_url = new URL(x_shere.href);
    shere_url.searchParams.set('text', `「<%= @lyric.title %>」記録は${per}%【うたいぴんぐ♫】`);
    x_shere.href = shere_url.href;
  }
</script>